// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../pkg/host/pullrequestcache.go
//
// Generated by this command:
//
//	mockgen -package host -source ../../../pkg/host/pullrequestcache.go -destination pullrequestcache.gen.go
//

// Package host is a generated GoMock package.
package host

import (
	reflect "reflect"
	time "time"

	host "github.com/wndhydrnt/saturn-bot/pkg/host"
	gomock "go.uber.org/mock/gomock"
)

// MockCacher is a mock of Cacher interface.
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
	isgomock struct{}
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance.
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCacher) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacherMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacher)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockCacher) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacherMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacher)(nil).Get), key)
}

// Set mocks base method.
func (m *MockCacher) Set(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacherMockRecorder) Set(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacher)(nil).Set), key, value)
}

// MockPullRequestCache is a mock of PullRequestCache interface.
type MockPullRequestCache struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestCacheMockRecorder
	isgomock struct{}
}

// MockPullRequestCacheMockRecorder is the mock recorder for MockPullRequestCache.
type MockPullRequestCacheMockRecorder struct {
	mock *MockPullRequestCache
}

// NewMockPullRequestCache creates a new mock instance.
func NewMockPullRequestCache(ctrl *gomock.Controller) *MockPullRequestCache {
	mock := &MockPullRequestCache{ctrl: ctrl}
	mock.recorder = &MockPullRequestCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestCache) EXPECT() *MockPullRequestCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPullRequestCache) Delete(branchName, repo string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", branchName, repo)
}

// Delete indicates an expected call of Delete.
func (mr *MockPullRequestCacheMockRecorder) Delete(branchName, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPullRequestCache)(nil).Delete), branchName, repo)
}

// Get mocks base method.
func (m *MockPullRequestCache) Get(branchName, repoName string) *host.PullRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", branchName, repoName)
	ret0, _ := ret[0].(*host.PullRequest)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockPullRequestCacheMockRecorder) Get(branchName, repoName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPullRequestCache)(nil).Get), branchName, repoName)
}

// LastUpdatedAtFor mocks base method.
func (m *MockPullRequestCache) LastUpdatedAtFor(host host.Host) *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastUpdatedAtFor", host)
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// LastUpdatedAtFor indicates an expected call of LastUpdatedAtFor.
func (mr *MockPullRequestCacheMockRecorder) LastUpdatedAtFor(host any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastUpdatedAtFor", reflect.TypeOf((*MockPullRequestCache)(nil).LastUpdatedAtFor), host)
}

// Set mocks base method.
func (m *MockPullRequestCache) Set(branchName, repoName string, pr *host.PullRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", branchName, repoName, pr)
}

// Set indicates an expected call of Set.
func (mr *MockPullRequestCacheMockRecorder) Set(branchName, repoName, pr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPullRequestCache)(nil).Set), branchName, repoName, pr)
}

// SetLastUpdatedAtFor mocks base method.
func (m *MockPullRequestCache) SetLastUpdatedAtFor(host host.Host, updatedAt time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastUpdatedAtFor", host, updatedAt)
}

// SetLastUpdatedAtFor indicates an expected call of SetLastUpdatedAtFor.
func (mr *MockPullRequestCacheMockRecorder) SetLastUpdatedAtFor(host, updatedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastUpdatedAtFor", reflect.TypeOf((*MockPullRequestCache)(nil).SetLastUpdatedAtFor), host, updatedAt)
}

// SetRawFactory mocks base method.
func (m *MockPullRequestCache) SetRawFactory(hostType host.Type, fac host.PrCacheRawFactory) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRawFactory", hostType, fac)
}

// SetRawFactory indicates an expected call of SetRawFactory.
func (mr *MockPullRequestCacheMockRecorder) SetRawFactory(hostType, fac any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRawFactory", reflect.TypeOf((*MockPullRequestCache)(nil).SetRawFactory), hostType, fac)
}

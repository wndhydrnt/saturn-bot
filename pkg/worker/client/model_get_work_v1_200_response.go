/*
saturn-bot server API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetWorkV1200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetWorkV1200Response{}

// GetWorkV1200Response struct for GetWorkV1200Response
type GetWorkV1200Response struct {
	// Internal identifier of the unit of work.
	ExecutionID int32 `json:"executionID"`
	// Repository for which to apply the tasks.
	Repository string `json:"repository"`
	// Names of the tasks to execute.
	Tasks []string `json:"tasks"`
}

type _GetWorkV1200Response GetWorkV1200Response

// NewGetWorkV1200Response instantiates a new GetWorkV1200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetWorkV1200Response(executionID int32, repository string, tasks []string) *GetWorkV1200Response {
	this := GetWorkV1200Response{}
	this.ExecutionID = executionID
	this.Repository = repository
	this.Tasks = tasks
	return &this
}

// NewGetWorkV1200ResponseWithDefaults instantiates a new GetWorkV1200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetWorkV1200ResponseWithDefaults() *GetWorkV1200Response {
	this := GetWorkV1200Response{}
	return &this
}

// GetExecutionID returns the ExecutionID field value
func (o *GetWorkV1200Response) GetExecutionID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExecutionID
}

// GetExecutionIDOk returns a tuple with the ExecutionID field value
// and a boolean to check if the value has been set.
func (o *GetWorkV1200Response) GetExecutionIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutionID, true
}

// SetExecutionID sets field value
func (o *GetWorkV1200Response) SetExecutionID(v int32) {
	o.ExecutionID = v
}

// GetRepository returns the Repository field value
func (o *GetWorkV1200Response) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *GetWorkV1200Response) GetRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *GetWorkV1200Response) SetRepository(v string) {
	o.Repository = v
}

// GetTasks returns the Tasks field value
func (o *GetWorkV1200Response) GetTasks() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value
// and a boolean to check if the value has been set.
func (o *GetWorkV1200Response) GetTasksOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tasks, true
}

// SetTasks sets field value
func (o *GetWorkV1200Response) SetTasks(v []string) {
	o.Tasks = v
}

func (o GetWorkV1200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetWorkV1200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["executionID"] = o.ExecutionID
	toSerialize["repository"] = o.Repository
	toSerialize["tasks"] = o.Tasks
	return toSerialize, nil
}

func (o *GetWorkV1200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"executionID",
		"repository",
		"tasks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetWorkV1200Response := _GetWorkV1200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetWorkV1200Response)

	if err != nil {
		return err
	}

	*o = GetWorkV1200Response(varGetWorkV1200Response)

	return err
}

type NullableGetWorkV1200Response struct {
	value *GetWorkV1200Response
	isSet bool
}

func (v NullableGetWorkV1200Response) Get() *GetWorkV1200Response {
	return v.value
}

func (v *NullableGetWorkV1200Response) Set(val *GetWorkV1200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetWorkV1200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetWorkV1200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetWorkV1200Response(val *GetWorkV1200Response) *NullableGetWorkV1200Response {
	return &NullableGetWorkV1200Response{value: val, isSet: true}
}

func (v NullableGetWorkV1200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetWorkV1200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



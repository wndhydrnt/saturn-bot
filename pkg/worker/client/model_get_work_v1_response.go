/*
saturn-bot server API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetWorkV1Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetWorkV1Response{}

// GetWorkV1Response struct for GetWorkV1Response
type GetWorkV1Response struct {
	// Internal identifier of the unit of work.
	RunID int32 `json:"runID"`
	// Repository for which to apply the tasks.
	Repository *string `json:"repository,omitempty"`
	// Names of the tasks to execute.
	Tasks []GetWorkV1Task `json:"tasks"`
}

type _GetWorkV1Response GetWorkV1Response

// NewGetWorkV1Response instantiates a new GetWorkV1Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetWorkV1Response(runID int32, tasks []GetWorkV1Task) *GetWorkV1Response {
	this := GetWorkV1Response{}
	this.RunID = runID
	this.Tasks = tasks
	return &this
}

// NewGetWorkV1ResponseWithDefaults instantiates a new GetWorkV1Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetWorkV1ResponseWithDefaults() *GetWorkV1Response {
	this := GetWorkV1Response{}
	return &this
}

// GetRunID returns the RunID field value
func (o *GetWorkV1Response) GetRunID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RunID
}

// GetRunIDOk returns a tuple with the RunID field value
// and a boolean to check if the value has been set.
func (o *GetWorkV1Response) GetRunIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunID, true
}

// SetRunID sets field value
func (o *GetWorkV1Response) SetRunID(v int32) {
	o.RunID = v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *GetWorkV1Response) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetWorkV1Response) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *GetWorkV1Response) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *GetWorkV1Response) SetRepository(v string) {
	o.Repository = &v
}

// GetTasks returns the Tasks field value
func (o *GetWorkV1Response) GetTasks() []GetWorkV1Task {
	if o == nil {
		var ret []GetWorkV1Task
		return ret
	}

	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value
// and a boolean to check if the value has been set.
func (o *GetWorkV1Response) GetTasksOk() ([]GetWorkV1Task, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tasks, true
}

// SetTasks sets field value
func (o *GetWorkV1Response) SetTasks(v []GetWorkV1Task) {
	o.Tasks = v
}

func (o GetWorkV1Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetWorkV1Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["runID"] = o.RunID
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	toSerialize["tasks"] = o.Tasks
	return toSerialize, nil
}

func (o *GetWorkV1Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"runID",
		"tasks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetWorkV1Response := _GetWorkV1Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetWorkV1Response)

	if err != nil {
		return err
	}

	*o = GetWorkV1Response(varGetWorkV1Response)

	return err
}

type NullableGetWorkV1Response struct {
	value *GetWorkV1Response
	isSet bool
}

func (v NullableGetWorkV1Response) Get() *GetWorkV1Response {
	return v.value
}

func (v *NullableGetWorkV1Response) Set(val *GetWorkV1Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetWorkV1Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetWorkV1Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetWorkV1Response(val *GetWorkV1Response) *NullableGetWorkV1Response {
	return &NullableGetWorkV1Response{value: val, isSet: true}
}

func (v NullableGetWorkV1Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetWorkV1Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



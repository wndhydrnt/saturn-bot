/*
saturn-bot server API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetWorkV1Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetWorkV1Task{}

// GetWorkV1Task struct for GetWorkV1Task
type GetWorkV1Task struct {
	// Hash of the task. Used to detect if server and worker are out of sync.
	Hash string `json:"hash"`
	// Name of the task to execute.
	Name string `json:"name"`
}

type _GetWorkV1Task GetWorkV1Task

// NewGetWorkV1Task instantiates a new GetWorkV1Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetWorkV1Task(hash string, name string) *GetWorkV1Task {
	this := GetWorkV1Task{}
	this.Hash = hash
	this.Name = name
	return &this
}

// NewGetWorkV1TaskWithDefaults instantiates a new GetWorkV1Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetWorkV1TaskWithDefaults() *GetWorkV1Task {
	this := GetWorkV1Task{}
	return &this
}

// GetHash returns the Hash field value
func (o *GetWorkV1Task) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *GetWorkV1Task) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *GetWorkV1Task) SetHash(v string) {
	o.Hash = v
}

// GetName returns the Name field value
func (o *GetWorkV1Task) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GetWorkV1Task) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GetWorkV1Task) SetName(v string) {
	o.Name = v
}

func (o GetWorkV1Task) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetWorkV1Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *GetWorkV1Task) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hash",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetWorkV1Task := _GetWorkV1Task{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetWorkV1Task)

	if err != nil {
		return err
	}

	*o = GetWorkV1Task(varGetWorkV1Task)

	return err
}

type NullableGetWorkV1Task struct {
	value *GetWorkV1Task
	isSet bool
}

func (v NullableGetWorkV1Task) Get() *GetWorkV1Task {
	return v.value
}

func (v *NullableGetWorkV1Task) Set(val *GetWorkV1Task) {
	v.value = val
	v.isSet = true
}

func (v NullableGetWorkV1Task) IsSet() bool {
	return v.isSet
}

func (v *NullableGetWorkV1Task) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetWorkV1Task(val *GetWorkV1Task) *NullableGetWorkV1Task {
	return &NullableGetWorkV1Task{value: val, isSet: true}
}

func (v NullableGetWorkV1Task) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetWorkV1Task) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



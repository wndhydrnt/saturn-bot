// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ReportWorkV1ResponseResult.
const (
	Ok ReportWorkV1ResponseResult = "ok"
)

// Defines values for RunStatusV1.
const (
	Failed   RunStatusV1 = "failed"
	Finished RunStatusV1 = "finished"
	Pending  RunStatusV1 = "pending"
	Running  RunStatusV1 = "running"
)

// Defines values for RunV1Reason.
const (
	Changed RunV1Reason = "changed"
	Cron    RunV1Reason = "cron"
	Manual  RunV1Reason = "manual"
	New     RunV1Reason = "new"
	Next    RunV1Reason = "next"
	Webhook RunV1Reason = "webhook"
)

// Defines values for TaskResultStateV1.
const (
	TaskResultStateV1Closed  TaskResultStateV1 = "closed"
	TaskResultStateV1Error   TaskResultStateV1 = "error"
	TaskResultStateV1Merged  TaskResultStateV1 = "merged"
	TaskResultStateV1Open    TaskResultStateV1 = "open"
	TaskResultStateV1Pushed  TaskResultStateV1 = "pushed"
	TaskResultStateV1Unknown TaskResultStateV1 = "unknown"
)

// DeleteRunV1Response defines model for DeleteRunV1Response.
type DeleteRunV1Response = map[string]interface{}

// Error defines model for Error.
type Error struct {
	// Errors A list of errors.
	Errors []ErrorDetail `json:"errors"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Detail A human-readable message that provides more details about the error.
	Detail *string `json:"detail,omitempty"`

	// Error Internal identifier of the error.
	Error int `json:"error"`

	// Message A short, human-readable error message.
	Message string `json:"message"`
}

// GetRunV1Response defines model for GetRunV1Response.
type GetRunV1Response struct {
	Run RunV1 `json:"run"`
}

// GetTaskV1Response defines model for GetTaskV1Response.
type GetTaskV1Response struct {
	Content string         `json:"content"`
	Hash    string         `json:"hash"`
	Inputs  *[]TaskV1Input `json:"inputs,omitempty"`
	Name    string         `json:"name"`
}

// GetWorkV1Response defines model for GetWorkV1Response.
type GetWorkV1Response struct {
	// Repositories Names of repositories for which to apply the tasks.
	Repositories *[]string `json:"repositories,omitempty"`

	// RunData Run data.
	RunData *map[string]string `json:"runData,omitempty"`

	// RunID Internal identifier of the unit of work.
	RunID int `json:"runID"`

	// Task The task to execute.
	Task WorkTaskV1 `json:"task"`
}

// ListOptions defines model for ListOptions.
type ListOptions struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
}

// ListRunsV1Response defines model for ListRunsV1Response.
type ListRunsV1Response struct {
	Page Page `json:"page"`

	// Result List of runs.
	Result []RunV1 `json:"result"`
}

// ListTaskRecentTaskResultsV1Response defines model for ListTaskRecentTaskResultsV1Response.
type ListTaskRecentTaskResultsV1Response struct {
	Page        Page           `json:"page"`
	TaskResults []TaskResultV1 `json:"taskResults"`
}

// ListTaskResultsV1Response defines model for ListTaskResultsV1Response.
type ListTaskResultsV1Response struct {
	Page        Page           `json:"page"`
	TaskResults []TaskResultV1 `json:"taskResults"`
}

// ListTasksV1Response defines model for ListTasksV1Response.
type ListTasksV1Response struct {
	Page Page `json:"page"`

	// Results Names of registered tasks.
	Results []ListTasksV1ResponseTask `json:"results"`
}

// ListTasksV1ResponseTask defines model for ListTasksV1ResponseTask.
type ListTasksV1ResponseTask struct {
	Active   bool   `json:"active"`
	Checksum string `json:"checksum"`
	Name     string `json:"name"`
}

// Page defines model for Page.
type Page struct {
	// CurrentPage Number of the current page.
	CurrentPage int `json:"currentPage"`

	// ItemsPerPage Count of items per page.
	ItemsPerPage int `json:"itemsPerPage"`

	// NextPage Number of the page with the next results.
	// 0 if there is no next page.
	NextPage int `json:"nextPage"`

	// PreviousPage Number of the previous page.
	// 0 if there is no previous page.
	PreviousPage int `json:"previousPage"`

	// TotalItems Total number of items.
	TotalItems int `json:"totalItems"`

	// TotalPages Total number of pages.
	TotalPages int `json:"totalPages"`
}

// ReportWorkV1Request defines model for ReportWorkV1Request.
type ReportWorkV1Request struct {
	// Error General that occurred during the run, if any.
	Error *string `json:"error,omitempty"`

	// RunID Internal identifier of the unit of work.
	RunID int `json:"runID"`

	// Task The task to execute.
	Task WorkTaskV1 `json:"task"`

	// TaskResults Results of each task.
	TaskResults []ReportWorkV1TaskResult `json:"taskResults"`
}

// ReportWorkV1Response defines model for ReportWorkV1Response.
type ReportWorkV1Response struct {
	// Result Indicator of the result of the operation.
	Result ReportWorkV1ResponseResult `json:"result"`
}

// ReportWorkV1ResponseResult Indicator of the result of the operation.
type ReportWorkV1ResponseResult string

// ReportWorkV1TaskResult Result of the run of a task.
type ReportWorkV1TaskResult struct {
	// Error Error encountered during the run, if any.
	Error *string `json:"error,omitempty"`

	// PullRequestUrl URL of the pull request for humans to view.
	PullRequestUrl *string `json:"pullRequestUrl,omitempty"`

	// RepositoryName Name of the repository.
	RepositoryName string `json:"repositoryName"`

	// Result Identifier of the result.
	Result int `json:"result"`

	// State State of the result.
	// `closed` indicates that a pull request existed and has been closed.
	// `error` indicates that an error occurred while applying the task to the repository.
	// `merged` indicates that a pull request has been merged.
	// `open` indicates that a pull request is open and has not been merged yet.
	// `pushed` indicates that changes were pushed to the default branch.
	// `unknown` is a fallback value for any unexpected status.
	State TaskResultStateV1 `json:"state"`
}

// RunStatusV1 defines model for RunStatusV1.
type RunStatusV1 string

// RunV1 defines model for RunV1.
type RunV1 struct {
	Error      *string    `json:"error,omitempty"`
	FinishedAt *time.Time `json:"finishedAt,omitempty"`
	Id         uint       `json:"id"`

	// Reason The reason why a run has been scheduled.
	// The following reasons are deprecated: changed, new, next
	Reason        RunV1Reason        `json:"reason"`
	Repositories  *[]string          `json:"repositories,omitempty"`
	RunData       *map[string]string `json:"runData,omitempty"`
	ScheduleAfter time.Time          `json:"scheduleAfter"`
	StartedAt     *time.Time         `json:"startedAt,omitempty"`
	Status        RunStatusV1        `json:"status"`
	Task          string             `json:"task"`
}

// RunV1Reason The reason why a run has been scheduled.
// The following reasons are deprecated: changed, new, next
type RunV1Reason string

// ScheduleRunV1Request defines model for ScheduleRunV1Request.
type ScheduleRunV1Request struct {
	// Assignees List of usernames to set as assignees of pull requests. Optional.
	Assignees *[]string `json:"assignees,omitempty"`

	// RepositoryNames Names of the repositories for which to add a run.
	// Leave empty to schedule a run for all repositories the task matches.
	RepositoryNames *[]string `json:"repositoryNames,omitempty"`

	// Reviewers List of usernames to set as reviewers of pull requests. Optional.
	Reviewers *[]string          `json:"reviewers,omitempty"`
	RunData   *map[string]string `json:"runData,omitempty"`

	// ScheduleAfter Schedule the run after the given time.
	// Uses the current time if empty.
	ScheduleAfter *time.Time `json:"scheduleAfter,omitempty"`

	// TaskName Name of the task for which to add a run.
	TaskName string `json:"taskName"`
}

// ScheduleRunV1Response defines model for ScheduleRunV1Response.
type ScheduleRunV1Response struct {
	// RunID Identifier of the newly scheduled run.
	RunID int `json:"runID"`
}

// TaskResultStateV1 State of the result.
// `closed` indicates that a pull request existed and has been closed.
// `error` indicates that an error occurred while applying the task to the repository.
// `merged` indicates that a pull request has been merged.
// `open` indicates that a pull request is open and has not been merged yet.
// `pushed` indicates that changes were pushed to the default branch.
// `unknown` is a fallback value for any unexpected status.
type TaskResultStateV1 string

// TaskResultV1 defines model for TaskResultV1.
type TaskResultV1 struct {
	// Error Error that occurred while creating the pull request, if any.
	Error *string `json:"error,omitempty"`

	// PullRequestUrl URL of the pull request opened by saturn-bot.
	PullRequestUrl *string `json:"pullRequestUrl,omitempty"`

	// RepositoryName Name of the repository.
	RepositoryName string `json:"repositoryName"`

	// RunId Numeric identifier of the run this result is a part of.
	RunId int `json:"runId"`

	// Status State of the result.
	// `closed` indicates that a pull request existed and has been closed.
	// `error` indicates that an error occurred while applying the task to the repository.
	// `merged` indicates that a pull request has been merged.
	// `open` indicates that a pull request is open and has not been merged yet.
	// `pushed` indicates that changes were pushed to the default branch.
	// `unknown` is a fallback value for any unexpected status.
	Status TaskResultStateV1 `json:"status"`
}

// TaskV1Input defines model for TaskV1Input.
type TaskV1Input struct {
	// Default Default value to use if no input has been set via the command-line.
	Default *string `json:"default,omitempty"`

	// Description Text that describes the input value.
	Description *string `json:"description,omitempty"`

	// Name Key that identifies the input. Set via the command-line to set the input value.
	Name string `json:"name"`

	// Options If not empty, a list of possible values for the input.
	Options *[]string `json:"options,omitempty"`

	// Validation If not empty, a regular expression that validates the value of the input.
	Validation *string `json:"validation,omitempty"`
}

// WorkTaskV1 The task to execute.
type WorkTaskV1 struct {
	// Hash Hash of the task. Used to detect if server and worker are out of sync.
	Hash string `json:"hash"`

	// Name Name of the task to execute.
	Name string `json:"name"`
}

// ListTaskResultsV1Params defines parameters for ListTaskResultsV1.
type ListTaskResultsV1Params struct {
	// RunId ID of a run to filter by.
	RunId       *int                 `form:"runId,omitempty" json:"runId,omitempty"`
	Status      *[]TaskResultStateV1 `form:"status,omitempty" json:"status,omitempty"`
	ListOptions *ListOptions         `form:"listOptions,omitempty" json:"listOptions,omitempty"`
}

// ListTasksV1Params defines parameters for ListTasksV1.
type ListTasksV1Params struct {
	Active      *bool        `form:"active,omitempty" json:"active,omitempty"`
	ListOptions *ListOptions `form:"listOptions,omitempty" json:"listOptions,omitempty"`
}

// ListTaskRecentTaskResultsV1Params defines parameters for ListTaskRecentTaskResultsV1.
type ListTaskRecentTaskResultsV1Params struct {
	Status      *[]TaskResultStateV1 `form:"status,omitempty" json:"status,omitempty"`
	ListOptions *ListOptions         `form:"listOptions,omitempty" json:"listOptions,omitempty"`
}

// ListRunsV1Params defines parameters for ListRunsV1.
type ListRunsV1Params struct {
	// Task Name of the task to filter by.
	Task        *string        `form:"task,omitempty" json:"task,omitempty"`
	ListOptions *ListOptions   `form:"listOptions,omitempty" json:"listOptions,omitempty"`
	Status      *[]RunStatusV1 `form:"status,omitempty" json:"status,omitempty"`
}

// ScheduleRunV1JSONRequestBody defines body for ScheduleRunV1 for application/json ContentType.
type ScheduleRunV1JSONRequestBody = ScheduleRunV1Request

// ReportWorkV1JSONRequestBody defines body for ReportWorkV1 for application/json ContentType.
type ReportWorkV1JSONRequestBody = ReportWorkV1Request

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ScheduleRunV1WithBody request with any body
	ScheduleRunV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleRunV1(ctx context.Context, body ScheduleRunV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRunV1 request
	DeleteRunV1(ctx context.Context, runId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRunV1 request
	GetRunV1(ctx context.Context, runId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTaskResultsV1 request
	ListTaskResultsV1(ctx context.Context, params *ListTaskResultsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTasksV1 request
	ListTasksV1(ctx context.Context, params *ListTasksV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskV1 request
	GetTaskV1(ctx context.Context, task string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTaskRecentTaskResultsV1 request
	ListTaskRecentTaskResultsV1(ctx context.Context, task string, params *ListTaskRecentTaskResultsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRunsV1 request
	ListRunsV1(ctx context.Context, params *ListRunsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkV1 request
	GetWorkV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReportWorkV1WithBody request with any body
	ReportWorkV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReportWorkV1(ctx context.Context, body ReportWorkV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ScheduleRunV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleRunV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleRunV1(ctx context.Context, body ScheduleRunV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleRunV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRunV1(ctx context.Context, runId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRunV1Request(c.Server, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRunV1(ctx context.Context, runId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRunV1Request(c.Server, runId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTaskResultsV1(ctx context.Context, params *ListTaskResultsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTaskResultsV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTasksV1(ctx context.Context, params *ListTasksV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTasksV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskV1(ctx context.Context, task string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskV1Request(c.Server, task)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTaskRecentTaskResultsV1(ctx context.Context, task string, params *ListTaskRecentTaskResultsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTaskRecentTaskResultsV1Request(c.Server, task, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRunsV1(ctx context.Context, params *ListRunsV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRunsV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkV1(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkV1Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportWorkV1WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportWorkV1RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReportWorkV1(ctx context.Context, body ReportWorkV1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReportWorkV1Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewScheduleRunV1Request calls the generic ScheduleRunV1 builder with application/json body
func NewScheduleRunV1Request(server string, body ScheduleRunV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleRunV1RequestWithBody(server, "application/json", bodyReader)
}

// NewScheduleRunV1RequestWithBody generates requests for ScheduleRunV1 with any type of body
func NewScheduleRunV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/runs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRunV1Request generates requests for DeleteRunV1
func NewDeleteRunV1Request(server string, runId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/runs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRunV1Request generates requests for GetRunV1
func NewGetRunV1Request(server string, runId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "runId", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/runs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTaskResultsV1Request generates requests for ListTaskResultsV1
func NewListTaskResultsV1Request(server string, params *ListTaskResultsV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/taskResults")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RunId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "runId", runtime.ParamLocationQuery, *params.RunId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListOptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listOptions", runtime.ParamLocationQuery, *params.ListOptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTasksV1Request generates requests for ListTasksV1
func NewListTasksV1Request(server string, params *ListTasksV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Active != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListOptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listOptions", runtime.ParamLocationQuery, *params.ListOptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskV1Request generates requests for GetTaskV1
func NewGetTaskV1Request(server string, task string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task", runtime.ParamLocationPath, task)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListTaskRecentTaskResultsV1Request generates requests for ListTaskRecentTaskResultsV1
func NewListTaskRecentTaskResultsV1Request(server string, task string, params *ListTaskRecentTaskResultsV1Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task", runtime.ParamLocationPath, task)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/tasks/%s/results", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListOptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listOptions", runtime.ParamLocationQuery, *params.ListOptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRunsV1Request generates requests for ListRunsV1
func NewListRunsV1Request(server string, params *ListRunsV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/worker/runs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Task != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "task", runtime.ParamLocationQuery, *params.Task); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListOptions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listOptions", runtime.ParamLocationQuery, *params.ListOptions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkV1Request generates requests for GetWorkV1
func NewGetWorkV1Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/worker/work")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReportWorkV1Request calls the generic ReportWorkV1 builder with application/json body
func NewReportWorkV1Request(server string, body ReportWorkV1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReportWorkV1RequestWithBody(server, "application/json", bodyReader)
}

// NewReportWorkV1RequestWithBody generates requests for ReportWorkV1 with any type of body
func NewReportWorkV1RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/worker/work")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ScheduleRunV1WithBodyWithResponse request with any body
	ScheduleRunV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleRunV1ResponseBody, error)

	ScheduleRunV1WithResponse(ctx context.Context, body ScheduleRunV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleRunV1ResponseBody, error)

	// DeleteRunV1WithResponse request
	DeleteRunV1WithResponse(ctx context.Context, runId int, reqEditors ...RequestEditorFn) (*DeleteRunV1ResponseBody, error)

	// GetRunV1WithResponse request
	GetRunV1WithResponse(ctx context.Context, runId int, reqEditors ...RequestEditorFn) (*GetRunV1ResponseBody, error)

	// ListTaskResultsV1WithResponse request
	ListTaskResultsV1WithResponse(ctx context.Context, params *ListTaskResultsV1Params, reqEditors ...RequestEditorFn) (*ListTaskResultsV1ResponseBody, error)

	// ListTasksV1WithResponse request
	ListTasksV1WithResponse(ctx context.Context, params *ListTasksV1Params, reqEditors ...RequestEditorFn) (*ListTasksV1ResponseBody, error)

	// GetTaskV1WithResponse request
	GetTaskV1WithResponse(ctx context.Context, task string, reqEditors ...RequestEditorFn) (*GetTaskV1ResponseBody, error)

	// ListTaskRecentTaskResultsV1WithResponse request
	ListTaskRecentTaskResultsV1WithResponse(ctx context.Context, task string, params *ListTaskRecentTaskResultsV1Params, reqEditors ...RequestEditorFn) (*ListTaskRecentTaskResultsV1ResponseBody, error)

	// ListRunsV1WithResponse request
	ListRunsV1WithResponse(ctx context.Context, params *ListRunsV1Params, reqEditors ...RequestEditorFn) (*ListRunsV1ResponseBody, error)

	// GetWorkV1WithResponse request
	GetWorkV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkV1ResponseBody, error)

	// ReportWorkV1WithBodyWithResponse request with any body
	ReportWorkV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportWorkV1ResponseBody, error)

	ReportWorkV1WithResponse(ctx context.Context, body ReportWorkV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ReportWorkV1ResponseBody, error)
}

type ScheduleRunV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduleRunV1Response
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r ScheduleRunV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleRunV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRunV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteRunV1Response
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRunV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRunV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRunV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRunV1Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRunV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRunV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTaskResultsV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTaskResultsV1Response
}

// Status returns HTTPResponse.Status
func (r ListTaskResultsV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTaskResultsV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTasksV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTasksV1Response
}

// Status returns HTTPResponse.Status
func (r ListTasksV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTasksV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetTaskV1Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetTaskV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTaskRecentTaskResultsV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListTaskRecentTaskResultsV1Response
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r ListTaskRecentTaskResultsV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTaskRecentTaskResultsV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRunsV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRunsV1Response
}

// Status returns HTTPResponse.Status
func (r ListRunsV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRunsV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetWorkV1Response
}

// Status returns HTTPResponse.Status
func (r GetWorkV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReportWorkV1ResponseBody struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ReportWorkV1Response
}

// Status returns HTTPResponse.Status
func (r ReportWorkV1ResponseBody) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReportWorkV1ResponseBody) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ScheduleRunV1WithBodyWithResponse request with arbitrary body returning *ScheduleRunV1ResponseBody
func (c *ClientWithResponses) ScheduleRunV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleRunV1ResponseBody, error) {
	rsp, err := c.ScheduleRunV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleRunV1ResponseBody(rsp)
}

func (c *ClientWithResponses) ScheduleRunV1WithResponse(ctx context.Context, body ScheduleRunV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleRunV1ResponseBody, error) {
	rsp, err := c.ScheduleRunV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleRunV1ResponseBody(rsp)
}

// DeleteRunV1WithResponse request returning *DeleteRunV1ResponseBody
func (c *ClientWithResponses) DeleteRunV1WithResponse(ctx context.Context, runId int, reqEditors ...RequestEditorFn) (*DeleteRunV1ResponseBody, error) {
	rsp, err := c.DeleteRunV1(ctx, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRunV1ResponseBody(rsp)
}

// GetRunV1WithResponse request returning *GetRunV1ResponseBody
func (c *ClientWithResponses) GetRunV1WithResponse(ctx context.Context, runId int, reqEditors ...RequestEditorFn) (*GetRunV1ResponseBody, error) {
	rsp, err := c.GetRunV1(ctx, runId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRunV1ResponseBody(rsp)
}

// ListTaskResultsV1WithResponse request returning *ListTaskResultsV1ResponseBody
func (c *ClientWithResponses) ListTaskResultsV1WithResponse(ctx context.Context, params *ListTaskResultsV1Params, reqEditors ...RequestEditorFn) (*ListTaskResultsV1ResponseBody, error) {
	rsp, err := c.ListTaskResultsV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTaskResultsV1ResponseBody(rsp)
}

// ListTasksV1WithResponse request returning *ListTasksV1ResponseBody
func (c *ClientWithResponses) ListTasksV1WithResponse(ctx context.Context, params *ListTasksV1Params, reqEditors ...RequestEditorFn) (*ListTasksV1ResponseBody, error) {
	rsp, err := c.ListTasksV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTasksV1ResponseBody(rsp)
}

// GetTaskV1WithResponse request returning *GetTaskV1ResponseBody
func (c *ClientWithResponses) GetTaskV1WithResponse(ctx context.Context, task string, reqEditors ...RequestEditorFn) (*GetTaskV1ResponseBody, error) {
	rsp, err := c.GetTaskV1(ctx, task, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskV1ResponseBody(rsp)
}

// ListTaskRecentTaskResultsV1WithResponse request returning *ListTaskRecentTaskResultsV1ResponseBody
func (c *ClientWithResponses) ListTaskRecentTaskResultsV1WithResponse(ctx context.Context, task string, params *ListTaskRecentTaskResultsV1Params, reqEditors ...RequestEditorFn) (*ListTaskRecentTaskResultsV1ResponseBody, error) {
	rsp, err := c.ListTaskRecentTaskResultsV1(ctx, task, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTaskRecentTaskResultsV1ResponseBody(rsp)
}

// ListRunsV1WithResponse request returning *ListRunsV1ResponseBody
func (c *ClientWithResponses) ListRunsV1WithResponse(ctx context.Context, params *ListRunsV1Params, reqEditors ...RequestEditorFn) (*ListRunsV1ResponseBody, error) {
	rsp, err := c.ListRunsV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRunsV1ResponseBody(rsp)
}

// GetWorkV1WithResponse request returning *GetWorkV1ResponseBody
func (c *ClientWithResponses) GetWorkV1WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkV1ResponseBody, error) {
	rsp, err := c.GetWorkV1(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkV1ResponseBody(rsp)
}

// ReportWorkV1WithBodyWithResponse request with arbitrary body returning *ReportWorkV1ResponseBody
func (c *ClientWithResponses) ReportWorkV1WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReportWorkV1ResponseBody, error) {
	rsp, err := c.ReportWorkV1WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportWorkV1ResponseBody(rsp)
}

func (c *ClientWithResponses) ReportWorkV1WithResponse(ctx context.Context, body ReportWorkV1JSONRequestBody, reqEditors ...RequestEditorFn) (*ReportWorkV1ResponseBody, error) {
	rsp, err := c.ReportWorkV1(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReportWorkV1ResponseBody(rsp)
}

// ParseScheduleRunV1ResponseBody parses an HTTP response from a ScheduleRunV1WithResponse call
func ParseScheduleRunV1ResponseBody(rsp *http.Response) (*ScheduleRunV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleRunV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduleRunV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteRunV1ResponseBody parses an HTTP response from a DeleteRunV1WithResponse call
func ParseDeleteRunV1ResponseBody(rsp *http.Response) (*DeleteRunV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRunV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteRunV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRunV1ResponseBody parses an HTTP response from a GetRunV1WithResponse call
func ParseGetRunV1ResponseBody(rsp *http.Response) (*GetRunV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRunV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRunV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListTaskResultsV1ResponseBody parses an HTTP response from a ListTaskResultsV1WithResponse call
func ParseListTaskResultsV1ResponseBody(rsp *http.Response) (*ListTaskResultsV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTaskResultsV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTaskResultsV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListTasksV1ResponseBody parses an HTTP response from a ListTasksV1WithResponse call
func ParseListTasksV1ResponseBody(rsp *http.Response) (*ListTasksV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTasksV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTasksV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskV1ResponseBody parses an HTTP response from a GetTaskV1WithResponse call
func ParseGetTaskV1ResponseBody(rsp *http.Response) (*GetTaskV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetTaskV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListTaskRecentTaskResultsV1ResponseBody parses an HTTP response from a ListTaskRecentTaskResultsV1WithResponse call
func ParseListTaskRecentTaskResultsV1ResponseBody(rsp *http.Response) (*ListTaskRecentTaskResultsV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTaskRecentTaskResultsV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListTaskRecentTaskResultsV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListRunsV1ResponseBody parses an HTTP response from a ListRunsV1WithResponse call
func ParseListRunsV1ResponseBody(rsp *http.Response) (*ListRunsV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRunsV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRunsV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkV1ResponseBody parses an HTTP response from a GetWorkV1WithResponse call
func ParseGetWorkV1ResponseBody(rsp *http.Response) (*GetWorkV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetWorkV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReportWorkV1ResponseBody parses an HTTP response from a ReportWorkV1WithResponse call
func ParseReportWorkV1ResponseBody(rsp *http.Response) (*ReportWorkV1ResponseBody, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReportWorkV1ResponseBody{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ReportWorkV1Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

/*
saturn-bot server API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReportWorkV1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReportWorkV1Request{}

// ReportWorkV1Request struct for ReportWorkV1Request
type ReportWorkV1Request struct {
	// Internal identifier of the unit of work.
	RunID int32 `json:"runID"`
	// List of runs of each task.
	TaskResults []ReportWorkV1TaskResult `json:"taskResults"`
}

type _ReportWorkV1Request ReportWorkV1Request

// NewReportWorkV1Request instantiates a new ReportWorkV1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportWorkV1Request(runID int32, taskResults []ReportWorkV1TaskResult) *ReportWorkV1Request {
	this := ReportWorkV1Request{}
	this.RunID = runID
	this.TaskResults = taskResults
	return &this
}

// NewReportWorkV1RequestWithDefaults instantiates a new ReportWorkV1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportWorkV1RequestWithDefaults() *ReportWorkV1Request {
	this := ReportWorkV1Request{}
	return &this
}

// GetRunID returns the RunID field value
func (o *ReportWorkV1Request) GetRunID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RunID
}

// GetRunIDOk returns a tuple with the RunID field value
// and a boolean to check if the value has been set.
func (o *ReportWorkV1Request) GetRunIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunID, true
}

// SetRunID sets field value
func (o *ReportWorkV1Request) SetRunID(v int32) {
	o.RunID = v
}

// GetTaskResults returns the TaskResults field value
func (o *ReportWorkV1Request) GetTaskResults() []ReportWorkV1TaskResult {
	if o == nil {
		var ret []ReportWorkV1TaskResult
		return ret
	}

	return o.TaskResults
}

// GetTaskResultsOk returns a tuple with the TaskResults field value
// and a boolean to check if the value has been set.
func (o *ReportWorkV1Request) GetTaskResultsOk() ([]ReportWorkV1TaskResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskResults, true
}

// SetTaskResults sets field value
func (o *ReportWorkV1Request) SetTaskResults(v []ReportWorkV1TaskResult) {
	o.TaskResults = v
}

func (o ReportWorkV1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReportWorkV1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["runID"] = o.RunID
	toSerialize["taskResults"] = o.TaskResults
	return toSerialize, nil
}

func (o *ReportWorkV1Request) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"runID",
		"taskResults",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReportWorkV1Request := _ReportWorkV1Request{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReportWorkV1Request)

	if err != nil {
		return err
	}

	*o = ReportWorkV1Request(varReportWorkV1Request)

	return err
}

type NullableReportWorkV1Request struct {
	value *ReportWorkV1Request
	isSet bool
}

func (v NullableReportWorkV1Request) Get() *ReportWorkV1Request {
	return v.value
}

func (v *NullableReportWorkV1Request) Set(val *ReportWorkV1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableReportWorkV1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableReportWorkV1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportWorkV1Request(val *ReportWorkV1Request) *NullableReportWorkV1Request {
	return &NullableReportWorkV1Request{value: val, isSet: true}
}

func (v NullableReportWorkV1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportWorkV1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



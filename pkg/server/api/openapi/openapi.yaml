openapi: 3.0.3
info:
  title: saturn-bot server API
  # x-release-please-start-version
  version: 0.30.0
  # x-release-please-end-version
security:
  - ApiKeyAuth: []
paths:
  /api/v1/runs:
    get:
      operationId: listRunsV1
      summary: List of runs.
      description: |
        Returns a list of past and future runs.
        Optional filters can be applied.
      tags:
        - run
      parameters:
        - in: query
          name: task
          schema:
            type: string
          description: Name of the task to filter by.
        - in: query
          name: listOptions
          schema:
            $ref: "#/components/schemas/ListOptions"
        - in: query
          name: status
          schema:
            type: array
            items:
              $ref: "#/components/schemas/RunStatusV1"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRunsV1Response"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      operationId: scheduleRunV1
      summary: Schedule a run.
      description: Add a new run to the queue.
      tags:
        - run
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScheduleRunV1Request"
        required: true
      responses:
        "200":
          description: New run has been scheduled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleRunV1Response"
        "400":
          description: Client sent wrong data in request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /api/v1/runs/{runId}:
    delete:
      operationId: deleteRunV1
      summary: Delete a run.
      description: |
        Delete a run that is in state "pending" and has been created manually.
        A run in another state, like "running" or "finished", can't be deleted.
        A run created by a trigger, like cron or webhook, can't be deleted.
      tags:
        - run
      parameters:
        - in: path
          name: runId
          schema:
            type: integer
          required: true
          description: Numeric ID of the run.
      responses:
        "200":
          description: Detailed data of the run.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteRunV1Response"
        "400":
          description: |
            The run is either not in state "pending" or has not been created manually.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: The run does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: getRunV1
      summary: View data of a run.
      description: Returns details of a single run.
      tags:
        - run
      parameters:
        - in: path
          name: runId
          schema:
            type: integer
          required: true
          description: Numeric ID of the run.
      responses:
        "200":
          description: Detailed data of the run.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRunV1Response"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: The run does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/tasks:
    get:
      operationId: listTasksV1
      summary: List tasks.
      description: Returns a list of registered tasks.
      tags:
        - task
      parameters:
        - in: query
          name: active
          schema:
            type: boolean
        - in: query
          name: listOptions
          schema:
            $ref: "#/components/schemas/ListOptions"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTasksV1Response"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /api/v1/tasks/{task}:
    get:
      operationId: getTaskV1
      summary: Get information about a task.
      description: Returns detail information about a task.
      tags:
        - task
      parameters:
        - in: path
          name: task
          schema:
            type: string
          required: true
          description: Name of the task to return.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTaskV1Response"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/tasks/{task}/results:
    get:
      operationId: listTaskRecentTaskResultsV1
      summary: List recent run results of a task by repository.
      description: |
        Returns the most recent run result for each repository that has been modified by the task.
      tags:
        - task
      parameters:
        - in: path
          name: task
          schema:
            type: string
          required: true
          description: Name of the task.
        - in: query
          name: status
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TaskResultStateV1"
        - in: query
          name: listOptions
          schema:
            $ref: "#/components/schemas/ListOptions"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTaskRecentTaskResultsV1Response"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/taskResults:
    get:
      operationId: listTaskResultsV1
      summary: Task results
      description: A list of the recent run results of the task.
      tags:
        - task
      parameters:
        - in: query
          name: repositoryName
          schema:
            type: string
          description: Name of a repository to filter by.
        - in: query
          name: runId
          schema:
            type: integer
          description: ID of a run to filter by.
        - in: query
          name: status
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TaskResultStateV1"
        - in: query
          name: listOptions
          schema:
            $ref: "#/components/schemas/ListOptions"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTaskResultsV1Response"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /api/v1/worker/work:
    get:
      operationId: getWorkV1
      summary: Get a unit of work.
      description: Let a worker retrieve the next unit of work.
      tags:
        - worker
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWorkV1Response"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      operationId: reportWorkV1
      summary: Report the result of a unit of work
      description: Used by workers to report the result of a unit of work.
      tags:
        - worker
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportWorkV1Request"
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportWorkV1Response"
        "401":
          $ref: "#/components/responses/Unauthorized"
components:
  responses:
    Unauthorized:
      description: The client presented an unknown API key.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    ScheduleRunV1Request:
      type: object
      properties:
        assignees:
          description: List of usernames to set as assignees of pull requests. Optional.
          type: array
          items:
            type: string
        repositoryNames:
          description: |-
            Names of the repositories for which to add a run.
            Leave empty to schedule a run for all repositories the task matches.
          type: array
          items:
            type: string
        reviewers:
          description: List of usernames to set as reviewers of pull requests. Optional.
          type: array
          items:
            type: string
        scheduleAfter:
          description: |-
            Schedule the run after the given time.
            Uses the current time if empty.
          type: string
          format: date-time
        taskName:
          description: Name of the task for which to add a run.
          type: string
        runData:
          type: object
          additionalProperties:
            type: string
      required: ["taskName"]
    ScheduleRunV1Response:
      type: object
      properties:
        runID:
          description: Identifier of the newly scheduled run.
          type: integer
      required: ["runID"]
    GetWorkV1Response:
      type: object
      properties:
        runID:
          description: Internal identifier of the unit of work.
          type: integer
        repositories:
          description: Names of repositories for which to apply the tasks.
          type: array
          items:
            type: string
        runData:
          description: Run data.
          type: object
          additionalProperties:
            type: string
        task:
          $ref: "#/components/schemas/WorkTaskV1"
      required: ["runID", "task"]
    WorkTaskV1:
      description: The task to execute.
      type: object
      properties:
        hash:
          description: Hash of the task. Used to detect if server and worker are out of sync.
          type: string
        name:
          description: Name of the task to execute.
          type: string
      required: ["hash", "name"]
    Error:
      type: object
      properties:
        errors:
          description: A list of errors.
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"
      required: ["errors"]
    ErrorDetail:
      type: object
      properties:
        error:
          description: Internal identifier of the error.
          type: integer
        message:
          description: A short, human-readable error message.
          type: string
        detail:
          description: A human-readable message that provides more details about the error.
          type: string
      required: ["error", "message"]
    ReportWorkV1Response:
      type: object
      properties:
        result:
          description: Indicator of the result of the operation.
          type: "string"
          enum: ["ok"]
      required: ["result"]
    ReportWorkV1Request:
      type: object
      properties:
        error:
          description: General that occurred during the run, if any.
          type: string
        runID:
          description: Internal identifier of the unit of work.
          type: integer
        task:
          $ref: "#/components/schemas/WorkTaskV1"
        taskResults:
          description: Results of each task.
          type: array
          items:
            $ref: "#/components/schemas/ReportWorkV1TaskResult"
      required: ["runID", "task", "taskResults"]
    ReportWorkV1TaskResult:
      description: Result of the run of a task.
      type: object
      properties:
        error:
          description: Error encountered during the run, if any.
          type: string
        pullRequestUrl:
          description: URL of the pull request for humans to view.
          type: string
        repositoryName:
          description: Name of the repository.
          type: string
        result:
          description: Identifier of the result.
          type: integer
        state:
          $ref: "#/components/schemas/TaskResultStateV1"
      required: ["repositoryName", "result", "state"]
    ListTasksV1Response:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/Page"
        results:
          description: Names of registered tasks.
          type: array
          items:
            $ref: "#/components/schemas/ListTasksV1ResponseTask"
      required: ["page", "results"]
    ListTasksV1ResponseTask:
      type: object
      properties:
        active:
          type: boolean
        checksum:
          type: string
        name:
          type: string
      required: ["active", "checksum", "name"]
    GetTaskV1Response:
      type: object
      properties:
        name:
          type: string
        hash:
          type: string
        content:
          type: string
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/TaskV1Input"
      required: ["name", "hash", "content"]
    ListOptions:
      type: object
      properties:
        page:
          default: 1
          type: integer
        limit:
          default: 20
          type: integer
          minimum: 1
          maximum: 50
      required: ["page", "limit"]
    Page:
      type: object
      properties:
        previousPage:
          description: |
            Number of the previous page.
            0 if there is no previous page.
          type: integer
        currentPage:
          description: Number of the current page.
          type: integer
        nextPage:
          description: |
            Number of the page with the next results.
            0 if there is no next page.
          type: integer
        totalPages:
          description: Total number of pages.
          type: integer
        itemsPerPage:
          description: Count of items per page.
          type: integer
        totalItems:
          description: Total number of items.
          type: integer
      required: ["currentPage", "nextPage", "itemsPerPage", "previousPage", "totalItems", "totalPages"]
    ListRunsV1Response:
      type: object
      properties:
        result:
          type: array
          description: List of runs.
          items:
            $ref: "#/components/schemas/RunV1"
        page:
          $ref: "#/components/schemas/Page"
      required: ["result", "page"]
    RunV1:
      type: object
      properties:
        error:
          type: string
        finishedAt:
          type: string
          format: date-time
        id:
          x-go-type: uint
          type: integer
        reason:
          description: |
            The reason why a run has been scheduled.
            The following reasons are deprecated: changed, new, next
          type: string
          enum:
            - changed
            - cron
            - manual
            - new
            - next
            - webhook
        repositories:
          type: array
          items:
            type: string
        runData:
          type: object
          additionalProperties:
            type: string
        scheduleAfter:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/RunStatusV1"
        task:
          type: string
      required: ["id", "reason", "scheduleAfter", "status", "task"]
    RunStatusV1:
      type: string
      enum:
        - pending
        - running
        - finished
        - failed
    GetRunV1Response:
      type: object
      properties:
        run:
          $ref: "#/components/schemas/RunV1"
      required: ["run"]
    TaskResultV1:
      type: object
      properties:
        error:
          description: Error that occurred while creating the pull request, if any.
          type: string
        repositoryName:
          description: Name of the repository.
          type: string
        pullRequestUrl:
          description: URL of the pull request opened by saturn-bot.
          type: string
        status:
          $ref: "#/components/schemas/TaskResultStateV1"
        runId:
          description: Numeric identifier of the run this result is a part of.
          type: integer
      required: ["repositoryName", "status", "runId"]
    TaskResultStateV1:
      description: |
        State of the result.
        `archived` indicates that the repository of a pull request has been archived.
        `closed` indicates that a pull request existed and has been closed.
        `error` indicates that an error occurred while applying the task to the repository.
        `merged` indicates that a pull request has been merged.
        `open` indicates that a pull request is open and has not been merged yet.
        `pushed` indicates that changes were pushed to the default branch.
        `unknown` is a fallback value for any unexpected status.
      type: string
      enum:
        - archived
        - closed
        - error
        - merged
        - open
        - pushed
        - unknown
    ListTaskResultsV1Response:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/Page"
        taskResults:
          type: array
          items:
            $ref: "#/components/schemas/TaskResultV1"
      required: ["page", "taskResults"]
    ListTaskRecentTaskResultsV1Response:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/Page"
        taskResults:
          type: array
          items:
            $ref: "#/components/schemas/TaskResultV1"
      required: ["page", "taskResults"]
    TaskV1Input:
      type: object
      properties:
        default:
          description: "Default value to use if no input has been set via the command-line."
          type: "string"
        description:
          description: "Text that describes the input value."
          type: "string"
        name:
          description: "Key that identifies the input. Set via the command-line to set the input value."
          type: "string"
        validation:
          description: "If not empty, a regular expression that validates the value of the input."
          type: "string"
        options:
          description: "If not empty, a list of possible values for the input."
          type: "array"
          items:
            type: "string"
      required: ["name"]
    DeleteRunV1Response:
      type: object

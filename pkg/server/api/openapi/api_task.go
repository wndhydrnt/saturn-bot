// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * saturn-bot server API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// TaskAPIController binds http requests to an api service and writes the service results to the http response
type TaskAPIController struct {
	service TaskAPIServicer
	errorHandler ErrorHandler
}

// TaskAPIOption for how the controller is set up.
type TaskAPIOption func(*TaskAPIController)

// WithTaskAPIErrorHandler inject ErrorHandler into controller
func WithTaskAPIErrorHandler(h ErrorHandler) TaskAPIOption {
	return func(c *TaskAPIController) {
		c.errorHandler = h
	}
}

// NewTaskAPIController creates a default api controller
func NewTaskAPIController(s TaskAPIServicer, opts ...TaskAPIOption) *TaskAPIController {
	controller := &TaskAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TaskAPIController
func (c *TaskAPIController) Routes() Routes {
	return Routes{
		"GetTaskV1": Route{
			strings.ToUpper("Get"),
			"/api/v1/tasks/{task}",
			c.GetTaskV1,
		},
		"ListTasksV1": Route{
			strings.ToUpper("Get"),
			"/api/v1/tasks",
			c.ListTasksV1,
		},
	}
}

// GetTaskV1 - Get information about a task.
func (c *TaskAPIController) GetTaskV1(w http.ResponseWriter, r *http.Request) {
	taskParam := chi.URLParam(r, "task")
	if taskParam == "" {
		c.errorHandler(w, r, &RequiredError{"task"}, nil)
		return
	}
	result, err := c.service.GetTaskV1(r.Context(), taskParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListTasksV1 - List tasks.
func (c *TaskAPIController) ListTasksV1(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListTasksV1(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

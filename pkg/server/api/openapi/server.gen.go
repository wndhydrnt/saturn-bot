// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ReportWorkV1ResponseResult.
const (
	Ok ReportWorkV1ResponseResult = "ok"
)

// Defines values for RunV1Reason.
const (
	Changed RunV1Reason = "changed"
	Manual  RunV1Reason = "manual"
	New     RunV1Reason = "new"
	Next    RunV1Reason = "next"
	Webhook RunV1Reason = "webhook"
)

// Defines values for RunV1Status.
const (
	Failed   RunV1Status = "failed"
	Finished RunV1Status = "finished"
	Pending  RunV1Status = "pending"
	Running  RunV1Status = "running"
)

// Error defines model for Error.
type Error struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

// GetTaskV1Response defines model for GetTaskV1Response.
type GetTaskV1Response struct {
	Content string `json:"content"`
	Hash    string `json:"hash"`
	Name    string `json:"name"`
}

// GetWorkV1Response defines model for GetWorkV1Response.
type GetWorkV1Response struct {
	// Repositories Names of repositories for which to apply the tasks.
	Repositories *[]string `json:"repositories,omitempty"`

	// RunID Internal identifier of the unit of work.
	RunID int `json:"runID"`

	// Tasks Names of the tasks to execute.
	Tasks []GetWorkV1Task `json:"tasks"`
}

// GetWorkV1Task defines model for GetWorkV1Task.
type GetWorkV1Task struct {
	// Hash Hash of the task. Used to detect if server and worker are out of sync.
	Hash string `json:"hash"`

	// Name Name of the task to execute.
	Name string `json:"name"`
}

// ListOptions defines model for ListOptions.
type ListOptions struct {
	Limit int `json:"limit"`
	Page  int `json:"page"`
}

// ListRunsV1Response defines model for ListRunsV1Response.
type ListRunsV1Response struct {
	Page Page `json:"page"`

	// Result List of runs.
	Result []RunV1 `json:"result"`
}

// ListTasksV1Response defines model for ListTasksV1Response.
type ListTasksV1Response struct {
	// Tasks Names of registered tasks.
	Tasks []string `json:"tasks"`
}

// Page defines model for Page.
type Page struct {
	Next int `json:"next"`
}

// ReportWorkV1Request defines model for ReportWorkV1Request.
type ReportWorkV1Request struct {
	// Error General that occurred during the run, if any.
	Error *string `json:"error,omitempty"`

	// RunID Internal identifier of the unit of work.
	RunID int `json:"runID"`

	// TaskResults Results of each task.
	TaskResults []ReportWorkV1TaskResult `json:"taskResults"`
}

// ReportWorkV1Response defines model for ReportWorkV1Response.
type ReportWorkV1Response struct {
	// Result Indicator of the result of the operation.
	Result ReportWorkV1ResponseResult `json:"result"`
}

// ReportWorkV1ResponseResult Indicator of the result of the operation.
type ReportWorkV1ResponseResult string

// ReportWorkV1TaskResult Result of the run of a task.
type ReportWorkV1TaskResult struct {
	// Error Error encountered during the run, if any.
	Error *string `json:"error,omitempty"`

	// RepositoryName Name of the repository.
	RepositoryName string `json:"repositoryName"`

	// Result Identifier of the result.
	Result int `json:"result"`

	// TaskName Name of the task.
	TaskName string `json:"taskName"`
}

// RunV1 defines model for RunV1.
type RunV1 struct {
	FinishedAt    *time.Time  `json:"finishedAt,omitempty"`
	Id            int         `json:"id"`
	Reason        RunV1Reason `json:"reason"`
	Repositories  *[]string   `json:"repositories,omitempty"`
	ScheduleAfter time.Time   `json:"scheduleAfter"`
	StartedAt     *time.Time  `json:"startedAt,omitempty"`
	Status        RunV1Status `json:"status"`
	Task          string      `json:"task"`
}

// RunV1Reason defines model for RunV1.Reason.
type RunV1Reason string

// RunV1Status defines model for RunV1.Status.
type RunV1Status string

// ScheduleRunV1Request defines model for ScheduleRunV1Request.
type ScheduleRunV1Request struct {
	// RepositoryNames Names of the repositories for which to add a run.
	// Leave empty to schedule a run for all repositories the task matches.
	RepositoryNames *[]string          `json:"repositoryNames,omitempty"`
	RunData         *map[string]string `json:"runData,omitempty"`

	// ScheduleAfter Schedule the run after the given time.
	// Uses the current time if empty.
	ScheduleAfter *time.Time `json:"scheduleAfter,omitempty"`

	// TaskName Name of the task for which to add a run.
	TaskName string `json:"taskName"`
}

// ScheduleRunV1Response defines model for ScheduleRunV1Response.
type ScheduleRunV1Response struct {
	// RunID Identifier of the newly scheduled run.
	RunID int `json:"runID"`
}

// ListRunsV1Params defines parameters for ListRunsV1.
type ListRunsV1Params struct {
	// Task Name of the task to filter by.
	Task        *string      `form:"task,omitempty" json:"task,omitempty"`
	ListOptions *ListOptions `form:"listOptions,omitempty" json:"listOptions,omitempty"`
}

// ScheduleRunV1JSONRequestBody defines body for ScheduleRunV1 for application/json ContentType.
type ScheduleRunV1JSONRequestBody = ScheduleRunV1Request

// ReportWorkV1JSONRequestBody defines body for ReportWorkV1 for application/json ContentType.
type ReportWorkV1JSONRequestBody = ReportWorkV1Request

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Schedule a run.
	// (POST /api/v1/runs)
	ScheduleRunV1(w http.ResponseWriter, r *http.Request)
	// List tasks.
	// (GET /api/v1/tasks)
	ListTasksV1(w http.ResponseWriter, r *http.Request)
	// Get information about a task.
	// (GET /api/v1/tasks/{task})
	GetTaskV1(w http.ResponseWriter, r *http.Request, task string)
	// List of runs.
	// (GET /api/v1/worker/runs)
	ListRunsV1(w http.ResponseWriter, r *http.Request, params ListRunsV1Params)
	// Get a unit of work.
	// (GET /api/v1/worker/work)
	GetWorkV1(w http.ResponseWriter, r *http.Request)
	// Report the result of a unit of work
	// (POST /api/v1/worker/work)
	ReportWorkV1(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Schedule a run.
// (POST /api/v1/runs)
func (_ Unimplemented) ScheduleRunV1(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List tasks.
// (GET /api/v1/tasks)
func (_ Unimplemented) ListTasksV1(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get information about a task.
// (GET /api/v1/tasks/{task})
func (_ Unimplemented) GetTaskV1(w http.ResponseWriter, r *http.Request, task string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List of runs.
// (GET /api/v1/worker/runs)
func (_ Unimplemented) ListRunsV1(w http.ResponseWriter, r *http.Request, params ListRunsV1Params) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a unit of work.
// (GET /api/v1/worker/work)
func (_ Unimplemented) GetWorkV1(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Report the result of a unit of work
// (POST /api/v1/worker/work)
func (_ Unimplemented) ReportWorkV1(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ScheduleRunV1 operation middleware
func (siw *ServerInterfaceWrapper) ScheduleRunV1(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ScheduleRunV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTasksV1 operation middleware
func (siw *ServerInterfaceWrapper) ListTasksV1(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTasksV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTaskV1 operation middleware
func (siw *ServerInterfaceWrapper) GetTaskV1(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "task" -------------
	var task string

	err = runtime.BindStyledParameterWithOptions("simple", "task", chi.URLParam(r, "task"), &task, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskV1(w, r, task)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRunsV1 operation middleware
func (siw *ServerInterfaceWrapper) ListRunsV1(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunsV1Params

	// ------------- Optional query parameter "task" -------------

	err = runtime.BindQueryParameter("form", true, false, "task", r.URL.Query(), &params.Task)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task", Err: err})
		return
	}

	// ------------- Optional query parameter "listOptions" -------------

	err = runtime.BindQueryParameter("form", true, false, "listOptions", r.URL.Query(), &params.ListOptions)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listOptions", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRunsV1(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkV1 operation middleware
func (siw *ServerInterfaceWrapper) GetWorkV1(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReportWorkV1 operation middleware
func (siw *ServerInterfaceWrapper) ReportWorkV1(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReportWorkV1(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/runs", wrapper.ScheduleRunV1)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/tasks", wrapper.ListTasksV1)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/tasks/{task}", wrapper.GetTaskV1)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/worker/runs", wrapper.ListRunsV1)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/worker/work", wrapper.GetWorkV1)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/worker/work", wrapper.ReportWorkV1)
	})

	return r
}

type ScheduleRunV1RequestObject struct {
	Body *ScheduleRunV1JSONRequestBody
}

type ScheduleRunV1ResponseObject interface {
	VisitScheduleRunV1Response(w http.ResponseWriter) error
}

type ScheduleRunV1200JSONResponse ScheduleRunV1Response

func (response ScheduleRunV1200JSONResponse) VisitScheduleRunV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTasksV1RequestObject struct {
}

type ListTasksV1ResponseObject interface {
	VisitListTasksV1Response(w http.ResponseWriter) error
}

type ListTasksV1200JSONResponse ListTasksV1Response

func (response ListTasksV1200JSONResponse) VisitListTasksV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskV1RequestObject struct {
	Task string `json:"task"`
}

type GetTaskV1ResponseObject interface {
	VisitGetTaskV1Response(w http.ResponseWriter) error
}

type GetTaskV1200JSONResponse GetTaskV1Response

func (response GetTaskV1200JSONResponse) VisitGetTaskV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskV1404JSONResponse Error

func (response GetTaskV1404JSONResponse) VisitGetTaskV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskV1500JSONResponse Error

func (response GetTaskV1500JSONResponse) VisitGetTaskV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListRunsV1RequestObject struct {
	Params ListRunsV1Params
}

type ListRunsV1ResponseObject interface {
	VisitListRunsV1Response(w http.ResponseWriter) error
}

type ListRunsV1200JSONResponse ListRunsV1Response

func (response ListRunsV1200JSONResponse) VisitListRunsV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetWorkV1RequestObject struct {
}

type GetWorkV1ResponseObject interface {
	VisitGetWorkV1Response(w http.ResponseWriter) error
}

type GetWorkV1200JSONResponse GetWorkV1Response

func (response GetWorkV1200JSONResponse) VisitGetWorkV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReportWorkV1RequestObject struct {
	Body *ReportWorkV1JSONRequestBody
}

type ReportWorkV1ResponseObject interface {
	VisitReportWorkV1Response(w http.ResponseWriter) error
}

type ReportWorkV1201JSONResponse ReportWorkV1Response

func (response ReportWorkV1201JSONResponse) VisitReportWorkV1Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Schedule a run.
	// (POST /api/v1/runs)
	ScheduleRunV1(ctx context.Context, request ScheduleRunV1RequestObject) (ScheduleRunV1ResponseObject, error)
	// List tasks.
	// (GET /api/v1/tasks)
	ListTasksV1(ctx context.Context, request ListTasksV1RequestObject) (ListTasksV1ResponseObject, error)
	// Get information about a task.
	// (GET /api/v1/tasks/{task})
	GetTaskV1(ctx context.Context, request GetTaskV1RequestObject) (GetTaskV1ResponseObject, error)
	// List of runs.
	// (GET /api/v1/worker/runs)
	ListRunsV1(ctx context.Context, request ListRunsV1RequestObject) (ListRunsV1ResponseObject, error)
	// Get a unit of work.
	// (GET /api/v1/worker/work)
	GetWorkV1(ctx context.Context, request GetWorkV1RequestObject) (GetWorkV1ResponseObject, error)
	// Report the result of a unit of work
	// (POST /api/v1/worker/work)
	ReportWorkV1(ctx context.Context, request ReportWorkV1RequestObject) (ReportWorkV1ResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ScheduleRunV1 operation middleware
func (sh *strictHandler) ScheduleRunV1(w http.ResponseWriter, r *http.Request) {
	var request ScheduleRunV1RequestObject

	var body ScheduleRunV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ScheduleRunV1(ctx, request.(ScheduleRunV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ScheduleRunV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ScheduleRunV1ResponseObject); ok {
		if err := validResponse.VisitScheduleRunV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTasksV1 operation middleware
func (sh *strictHandler) ListTasksV1(w http.ResponseWriter, r *http.Request) {
	var request ListTasksV1RequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTasksV1(ctx, request.(ListTasksV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTasksV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTasksV1ResponseObject); ok {
		if err := validResponse.VisitListTasksV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTaskV1 operation middleware
func (sh *strictHandler) GetTaskV1(w http.ResponseWriter, r *http.Request, task string) {
	var request GetTaskV1RequestObject

	request.Task = task

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTaskV1(ctx, request.(GetTaskV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTaskV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTaskV1ResponseObject); ok {
		if err := validResponse.VisitGetTaskV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRunsV1 operation middleware
func (sh *strictHandler) ListRunsV1(w http.ResponseWriter, r *http.Request, params ListRunsV1Params) {
	var request ListRunsV1RequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRunsV1(ctx, request.(ListRunsV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRunsV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRunsV1ResponseObject); ok {
		if err := validResponse.VisitListRunsV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetWorkV1 operation middleware
func (sh *strictHandler) GetWorkV1(w http.ResponseWriter, r *http.Request) {
	var request GetWorkV1RequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetWorkV1(ctx, request.(GetWorkV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetWorkV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetWorkV1ResponseObject); ok {
		if err := validResponse.VisitGetWorkV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReportWorkV1 operation middleware
func (sh *strictHandler) ReportWorkV1(w http.ResponseWriter, r *http.Request) {
	var request ReportWorkV1RequestObject

	var body ReportWorkV1JSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReportWorkV1(ctx, request.(ReportWorkV1RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReportWorkV1")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReportWorkV1ResponseObject); ok {
		if err := validResponse.VisitReportWorkV1Response(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

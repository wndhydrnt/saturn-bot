// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * saturn-bot server API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// WorkerAPIController binds http requests to an api service and writes the service results to the http response
type WorkerAPIController struct {
	service WorkerAPIServicer
	errorHandler ErrorHandler
}

// WorkerAPIOption for how the controller is set up.
type WorkerAPIOption func(*WorkerAPIController)

// WithWorkerAPIErrorHandler inject ErrorHandler into controller
func WithWorkerAPIErrorHandler(h ErrorHandler) WorkerAPIOption {
	return func(c *WorkerAPIController) {
		c.errorHandler = h
	}
}

// NewWorkerAPIController creates a default api controller
func NewWorkerAPIController(s WorkerAPIServicer, opts ...WorkerAPIOption) *WorkerAPIController {
	controller := &WorkerAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkerAPIController
func (c *WorkerAPIController) Routes() Routes {
	return Routes{
		"GetWorkV1": Route{
			strings.ToUpper("Get"),
			"/api/v1/worker/work",
			c.GetWorkV1,
		},
		"ReportWorkV1": Route{
			strings.ToUpper("Post"),
			"/api/v1/worker/work",
			c.ReportWorkV1,
		},
	}
}

// GetWorkV1 - Get a unit of work.
func (c *WorkerAPIController) GetWorkV1(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetWorkV1(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReportWorkV1 - Report the result of a unit of work
func (c *WorkerAPIController) ReportWorkV1(w http.ResponseWriter, r *http.Request) {
	reportWorkV1RequestParam := ReportWorkV1Request{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&reportWorkV1RequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReportWorkV1RequestRequired(reportWorkV1RequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertReportWorkV1RequestConstraints(reportWorkV1RequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ReportWorkV1(r.Context(), reportWorkV1RequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

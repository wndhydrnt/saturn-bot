// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/processor/processor.go
//
// Generated by this command:
//
//	mockgen -package mock -source pkg/processor/processor.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	host "github.com/wndhydrnt/saturn-bot/pkg/host"
	processor "github.com/wndhydrnt/saturn-bot/pkg/processor"
	task "github.com/wndhydrnt/saturn-bot/pkg/task"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryTaskProcessor is a mock of RepositoryTaskProcessor interface.
type MockRepositoryTaskProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryTaskProcessorMockRecorder
}

// MockRepositoryTaskProcessorMockRecorder is the mock recorder for MockRepositoryTaskProcessor.
type MockRepositoryTaskProcessorMockRecorder struct {
	mock *MockRepositoryTaskProcessor
}

// NewMockRepositoryTaskProcessor creates a new mock instance.
func NewMockRepositoryTaskProcessor(ctrl *gomock.Controller) *MockRepositoryTaskProcessor {
	mock := &MockRepositoryTaskProcessor{ctrl: ctrl}
	mock.recorder = &MockRepositoryTaskProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryTaskProcessor) EXPECT() *MockRepositoryTaskProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockRepositoryTaskProcessor) Process(ctx context.Context, dryRun bool, repo host.Repository, task task.Task, doFilter bool) (processor.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, dryRun, repo, task, doFilter)
	ret0, _ := ret[0].(processor.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockRepositoryTaskProcessorMockRecorder) Process(ctx, dryRun, repo, task, doFilter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockRepositoryTaskProcessor)(nil).Process), ctx, dryRun, repo, task, doFilter)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/task/task.go
//
// Generated by this command:
//
//	mockgen -package mock -source pkg/task/task.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	action "github.com/wndhydrnt/saturn-sync/pkg/action"
	filter "github.com/wndhydrnt/saturn-sync/pkg/filter"
	host "github.com/wndhydrnt/saturn-sync/pkg/host"
	schema "github.com/wndhydrnt/saturn-sync/pkg/task/schema"
	gomock "go.uber.org/mock/gomock"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockTask) Actions() []action.Action {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].([]action.Action)
	return ret0
}

// Actions indicates an expected call of Actions.
func (mr *MockTaskMockRecorder) Actions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockTask)(nil).Actions))
}

// AutoMergeAfter mocks base method.
func (m *MockTask) AutoMergeAfter() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoMergeAfter")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// AutoMergeAfter indicates an expected call of AutoMergeAfter.
func (mr *MockTaskMockRecorder) AutoMergeAfter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMergeAfter", reflect.TypeOf((*MockTask)(nil).AutoMergeAfter))
}

// BranchName mocks base method.
func (m *MockTask) BranchName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BranchName")
	ret0, _ := ret[0].(string)
	return ret0
}

// BranchName indicates an expected call of BranchName.
func (mr *MockTaskMockRecorder) BranchName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchName", reflect.TypeOf((*MockTask)(nil).BranchName))
}

// Checksum mocks base method.
func (m *MockTask) Checksum() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checksum")
	ret0, _ := ret[0].(string)
	return ret0
}

// Checksum indicates an expected call of Checksum.
func (mr *MockTaskMockRecorder) Checksum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checksum", reflect.TypeOf((*MockTask)(nil).Checksum))
}

// Filters mocks base method.
func (m *MockTask) Filters() []filter.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filters")
	ret0, _ := ret[0].([]filter.Filter)
	return ret0
}

// Filters indicates an expected call of Filters.
func (mr *MockTaskMockRecorder) Filters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filters", reflect.TypeOf((*MockTask)(nil).Filters))
}

// OnPrClosed mocks base method.
func (m *MockTask) OnPrClosed(arg0 host.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnPrClosed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnPrClosed indicates an expected call of OnPrClosed.
func (mr *MockTaskMockRecorder) OnPrClosed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPrClosed", reflect.TypeOf((*MockTask)(nil).OnPrClosed), arg0)
}

// OnPrCreated mocks base method.
func (m *MockTask) OnPrCreated(arg0 host.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnPrCreated", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnPrCreated indicates an expected call of OnPrCreated.
func (mr *MockTaskMockRecorder) OnPrCreated(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPrCreated", reflect.TypeOf((*MockTask)(nil).OnPrCreated), arg0)
}

// OnPrMerged mocks base method.
func (m *MockTask) OnPrMerged(arg0 host.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnPrMerged", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnPrMerged indicates an expected call of OnPrMerged.
func (mr *MockTaskMockRecorder) OnPrMerged(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnPrMerged", reflect.TypeOf((*MockTask)(nil).OnPrMerged), arg0)
}

// PrTitle mocks base method.
func (m *MockTask) PrTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// PrTitle indicates an expected call of PrTitle.
func (mr *MockTaskMockRecorder) PrTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrTitle", reflect.TypeOf((*MockTask)(nil).PrTitle))
}

// SourceTask mocks base method.
func (m *MockTask) SourceTask() *schema.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceTask")
	ret0, _ := ret[0].(*schema.Task)
	return ret0
}

// SourceTask indicates an expected call of SourceTask.
func (mr *MockTaskMockRecorder) SourceTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceTask", reflect.TypeOf((*MockTask)(nil).SourceTask))
}

// Stop mocks base method.
func (m *MockTask) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTaskMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTask)(nil).Stop))
}
